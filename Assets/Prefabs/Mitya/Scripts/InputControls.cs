//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Prefabs/Mitya/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Prefabs.Mitya.Scripts
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""TankActionMap"",
            ""id"": ""04f284ad-023a-4aca-944e-da67ded31bf4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""717f4f04-de16-4b3c-bdb9-e24c1549aa05"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeedFactor"",
                    ""type"": ""Value"",
                    ""id"": ""d1498258-bec6-4c29-8c16-9d23b19882e0"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationMode"",
                    ""type"": ""Button"",
                    ""id"": ""7b13dbae-0212-463a-b7c4-5943b7b87581"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09f815f2-9710-40fe-aed1-2039318adc6b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33bb6176-0672-4f1f-ae22-9308087bc6a9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""SpeedFactor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3cc4a68-1b47-4d77-9a05-715d5430e34e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TankActionMap
            m_TankActionMap = asset.FindActionMap("TankActionMap", throwIfNotFound: true);
            m_TankActionMap_Move = m_TankActionMap.FindAction("Move", throwIfNotFound: true);
            m_TankActionMap_SpeedFactor = m_TankActionMap.FindAction("SpeedFactor", throwIfNotFound: true);
            m_TankActionMap_RotationMode = m_TankActionMap.FindAction("RotationMode", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TankActionMap
        private readonly InputActionMap m_TankActionMap;
        private List<ITankActionMapActions> m_TankActionMapActionsCallbackInterfaces = new List<ITankActionMapActions>();
        private readonly InputAction m_TankActionMap_Move;
        private readonly InputAction m_TankActionMap_SpeedFactor;
        private readonly InputAction m_TankActionMap_RotationMode;
        public struct TankActionMapActions
        {
            private @InputControls m_Wrapper;
            public TankActionMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_TankActionMap_Move;
            public InputAction @SpeedFactor => m_Wrapper.m_TankActionMap_SpeedFactor;
            public InputAction @RotationMode => m_Wrapper.m_TankActionMap_RotationMode;
            public InputActionMap Get() { return m_Wrapper.m_TankActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankActionMapActions set) { return set.Get(); }
            public void AddCallbacks(ITankActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_TankActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TankActionMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SpeedFactor.started += instance.OnSpeedFactor;
                @SpeedFactor.performed += instance.OnSpeedFactor;
                @SpeedFactor.canceled += instance.OnSpeedFactor;
                @RotationMode.started += instance.OnRotationMode;
                @RotationMode.performed += instance.OnRotationMode;
                @RotationMode.canceled += instance.OnRotationMode;
            }

            private void UnregisterCallbacks(ITankActionMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @SpeedFactor.started -= instance.OnSpeedFactor;
                @SpeedFactor.performed -= instance.OnSpeedFactor;
                @SpeedFactor.canceled -= instance.OnSpeedFactor;
                @RotationMode.started -= instance.OnRotationMode;
                @RotationMode.performed -= instance.OnRotationMode;
                @RotationMode.canceled -= instance.OnRotationMode;
            }

            public void RemoveCallbacks(ITankActionMapActions instance)
            {
                if (m_Wrapper.m_TankActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITankActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_TankActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TankActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TankActionMapActions @TankActionMap => new TankActionMapActions(this);
        public interface ITankActionMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnSpeedFactor(InputAction.CallbackContext context);
            void OnRotationMode(InputAction.CallbackContext context);
        }
    }
}
